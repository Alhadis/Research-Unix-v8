!<arch>
graphics.c      486655521   41    1     100664  2642      `
#include <jerq.h>
#include <layer.h>
#include <font.h>

#include "jcom.h"
#include "jjplot.h"
char *menutext[] = {"more","quit", NULL};
Menu menu = {menutext};

graphics(){
	register int c;
	register int counter;
	Point p0, p1, p2, p3, p4;
	struct seg  *s, *sp;
	short *tp;
	int r, d, ymin;
	int cir = 0;

	cursswitch(&cherries);
	counter = 0;
	while ((c = getchar())  != CLOSE){
		if(ckreshape())reinit();
		switch(c) {
	
		case HOME:
			PtCurrent.x = arect.origin.x;
			PtCurrent.y = arect.corner.y - NS;
			break;
		case ARC:	/* arc's Pcenter, Pstart, Pfinish */
			p0 = getpt();
			p1 = getpt();
			p2 = getpt();
			arc(&display, p0, p1, p2, F_STORE);
			PtCurrent = p2;
			break;
		case PAUSE:
			ringbell();
			while(1){
			if(!button3()||!(own()&MOUSE)){
				sleep(1);
				continue;
			}
			switch(menuhit(&menu, 3)){
			case MORE:
				sendchar(TOK);
				break;
			case QUIT:
				sendchar(TQUIT);
				goto tterm;
			case -1:
				continue;
			}
			break;
			}
			break;
	
		case ERASE:	/* erase screen */
			stipple(arect);
			PtCurrent = arect.origin;
			break;
	
		case MOVE:	/* move to point */
			PtCurrent = getpt();
			break;
		case POINT:
			PtCurrent = getpt();
			point(&display, PtCurrent, F_STORE);
			break;
		case LINETH:
			lineth = getchar();
			break;
		case FILL:
			d = getint();
			ymin = getint();
			ymin = muldiv(ymin,delta,800);
			if(d > 4){
			s=(struct seg *)alloc((unsigned)(d*
				sizeof(struct seg)));
			if(s==0)break;
			}
			else s=mLine;
			for(sp=s; sp<s+d; sp++){
				sp->j1 = getpt();
				sp->j2 = getpt();
				sp->stat = 1;
			}
			jjfill(d, s, ymin);
			if(d > 4)
				free(s);
			break;
		case TEXTURE:
			for(tp=&t.bits[0];tp<=&t.bits[15];tp++){
				*tp = getint();
			}
			break;
		case CIRCLE:
			cir++;
		case DISC:
			cir++;
			p0 = getpt();
			r = getint();
			r = muldiv(r,delta,800);
			if(cir == 1)
				disc(&display, p0, r, F_STORE);
			else circle(&display, p0, r, F_STORE);
			cir = 0;
			break;
		case SBOX:
			p0 = getpt();
			p1 = getpt();
			texture(&display, Rpt(p0, p1), &t, F_STORE);
			PtCurrent = p1;
			break;
	
		case TEXT:
			d = getint();
			PtCurrent.x -= d * CW;
			d = getint();
			while(--d)
				outc(getchar(), &PtCurrent, 1);
			break;
		case VEC:
			p0 = getpt();
			segment(&display, PtCurrent, p0, F_STORE);
			PtCurrent = p0;
			break;
		case PAR:
			p0 = getpt();
			p1 = getpt();
			p2 = getpt();
			parabola(p0, p1, p2);
			break;
		case TOK:
			if(own() & KBD){
				kbdchar();
				sendchar(TQUIT);
				goto tterm;
			} else sendchar(TOK);
			break;
		}
	}
tterm:	PtCurrent.x = arect.origin.x;
	PtCurrent.y = arect.corner.y - NS;
	cursswitch((Texture *) 0);
}
jfill.c         485456402   41    1     100664  2564      `
#include <jerq.h>
#include <layer.h>
#include "jjplot.h"
int place();
jjfill(so, s, yymin)
int	so, yymin;
struct seg *s;
{
	register struct seg *sp;
	struct seg *s1, *s2, *st;
	register int	yb;
	struct seg *sfin;

	sfin = s1 = s + so - 1;
	for (sp=s; sp<=sfin; sp++){
		if (sp->stat){
			if (sp->j1.y == sp->j2.y){
				if (sp < sfin) {
					s2 = sp+1;
					while(s2<=sfin && s2->j1.y==s2->j2.y){
						if (sp->j2.x == s2->j1.x)
							sp->j2.x = s2->j2.x;
						else if (sp->j1.x == s2->j2.x)
							sp->j1.x = s2->j1.x;
						s2++->stat = 0;
					}
				}
				else s2 = sp;
				if(s1->j1.y==sp->j1.y && s2->j1.y==sp->j1.y)
					sp->stat = 0;
				else if(s1->j2.y==sp->j1.y && s2->j2.y==sp->j1.y)
					sp->stat = 0;
			}
		}
		s1 = sp;
	}

	qsort(s, so, sizeof(struct seg), place);
	sfin++;
	s1 = s;
	yb = s1->j1.y;
	for(sp=s; yb<=sp->j1.y; sp++);
	s2 = sp - 1;
	for (; yb >= yymin; yb--) {
		draw(yb, s1, s2);
		for (st = s1; st <= s2; st++) {
			if (st->stat)
				if (yb <= st->j2.y)
					st->stat = 0;
		}
		if (sp >= sfin)
			continue;
		for (; yb <= (sp->j1.y + 1) && sp < sfin; sp++) {
			for (st = s1; st <= s2; st++) {
				if (sp->j1.y == st->j2.y) {
					if (sp->j1.x == st->j2.x)
						st->stat = 0;
					else if(sp->j2.y==sp->j1.y && sp->j2.x==st->j2.x)
						st->stat = 0;
				}
			}
		}

		s2 = sp - 1;
		while (!(s1->stat))
			s1++;
	}
}
draw(y, pr1, pr2)
int	y;
struct seg *pr1, *pr2;
{
	register struct seg *pr;
	register int *xp;
	int	x[32], yi, yii, xi, xii, xj;
	int *xpe;
	for(pr=pr1, xp=x; pr <= pr2;pr++){
		if (pr->stat)
			if (pr->j1.y != pr->j2.y){
				*xp++ = xcut(y, pr->j1.x, pr->j1.y, pr->j2.x, pr->j2.y);
				if(xp > &x[31])
					return;
			}
	}
	xpe = xp;
	if(xpe < &x[1])
		return;
	do {
		xj = 0;
		for(xp=x+1;xp<xpe;xp++){
			if(*(xp-1) > *xp){
				xj = *(xp-1);
				*(xp-1) = *xp;
				*xp = xj;
			}
		}
	} while(xj);
	for(xp=x; xp<xpe;xp++){
		xj = *xp++;
		texture(&display,Rect(xj, y, *xp, y+1),&t, F_OR);
	}
}
xcut(y, x1, y1, x2, y2)
{
	long 	dx, dy, xy;
	int x;
	if (y1 == y2) {
		x = x1 > x2 ? x1 : x2;
		return(x);
	}
	dy = y1 - y2;
	dx = x1 - x2;
	xy = (long)y1 * x2 - x1 * (long)y2;
	x = (y * dx + xy) / dy;
	return(x);
}
place(p1, p2)
struct seg *p1, *p2;
{
	if(p1->j1.y > p2->j1.y)
		return(-1);
	else if(p1->j1.y < p2->j1.y)
		return(1);
	else if(p1->j1.x > p2->j1.x)
		return(-1);
	else if(p1->j1.x < p2->j1.x)
		return(1);
	else if(p1->j2.x > p2->j2.x)
		return(-1);
	else if(p1->j2.x < p2->j2.x)
		return(1);
	else if(p1->j2.y > p2->j2.y)
		return(-1);
	else if(p1->j2.y < p2->j2.y)
		return(1);
	else return(0);
}
nbltpar.c       485456402   41    1     100664  1043      `
#include <jerq.h>
#include <font.h>
extern Point PtCurrent;
parabola(p0, p1, pb)
Point p0, p1, pb;
{
long x, y;
	long d1sq, d2sq;
	long x1, y1, x0, y0, xb, yb;
	Point p, db;
	long c0x, c0y, c1x, c1y, d1, d2, i;
	long dx, dy;
/*	segment(&display, p0, p1, F_OR);*/
	x0 = p0.x; y0 = p0.y;
	x1 = p1.x; y1 = p1.y;
	xb = pb.x; yb = pb.y;
	dx = xb - x0;
	dy = yb - y0;
	d1sq = dx*dx + dy*dy;
	dx = xb - x1;
	dy = yb - y1;
	d2sq = dx*dx + dy*dy;
	d1 = (long)sqrt(d1sq);
	d2 = (long)sqrt(d2sq);
	if(d1 <= 0 || d2 <= 0){
		segment(&display, p0, p1, F_OR);
		return;
	}

	c0x = x0 + x1 - (xb<<1);
	c1x =  (xb - x0)<<1;
	c0y = y0 + y1 - (yb<<1);
	c1y = (yb - y0)<<1;
	PtCurrent = p0;
	for(i=1;i<=d1/2; i++){
		x = x0 + (i*i*c0x)/d1sq + (i*c1x)/d1;
		y = y0 + (i*i*c0y)/d1sq + (i*c1y)/d1;
		p.x = x;
		p.y = y;
		segment(&display, PtCurrent, p, F_OR);
		PtCurrent = p;
	}
	for(;i<=d2; i++){
		x = x0 + (i*i*c0x)/d2sq + (i*c1x)/d2;
		y = y0 + (i*i*c0y)/d2sq + (i*c1y)/d2;
		p.x = x;
		p.y = y;
		segment(&display, PtCurrent, p, F_OR);
		PtCurrent = p;
	}
}

outc.c          485456403   41    1     100664  1271      `
#include <jerq.h>
#include <layer.h>
#include <font.h>

#include "jcom.h"
#include "jjplot.h"
int tab = 8 * CW;

outc(c, pp, adv)
register Point *pp;
{
	register Fontchar *fp;
	Rectangle r;
	Point p;
	int d;
	Code mode = F_XOR;

	switch(c&0377){
	case '\t':		/* tab modulo 8 */
		d = PtCurrent.x - Drect.origin.x;
		PtCurrent.x = d - (d % tab) + tab + Drect.origin.x;
		break;


	case '\n':		/* linefeed */
		newline();
		break;

	case '\r':		/* carriage return */
		PtCurrent.x = arect.origin.x;
		break;
	case '\b':		/* backspace */
		if(PtCurrent.x > arect.origin.x){
			PtCurrent.x -= CW;
			c = '\01';
			adv = 0;
			mode = F_CLR;
		}
		else break;

	
	default:		/* ordinary char */
		fp = defont.info+c;
		p = *pp;
		r.origin.x = fp->x;
		r.corner.x = (fp+1)->x;
		r.origin.y = fp->top;
		r.corner.y = fp->bottom;
		p.y += fp->top;
		bitblt(defont.bits, r, &display, p, mode);
		if(adv)
			PtCurrent.x += CW;
		break;
	case REQ:
		sendchar(ACK);
		sendchar('\n');
		break;
	case EXIT:
		exit();
	case '\007':		/* bell */
		ringbell();
		break;
	case OPEN:
		graphics();
		break;
	case CLOSE:
		PtCurrent.x = arect.origin.x;
		PtCurrent.y = arect.corner.y - NS;
		return;
	}
	if(PtCurrent.x > arect.corner.x - CW) {
		PtCurrent.x = arect.origin.x;
		newline();
	}
}

term.c          485456403   41    1     100664  3346      `
#include <jerq.h>
#include <layer.h>
#include <font.h>

#include "jcom.h"
#include "jjplot.h"

char *menu2t[] = {"exit jplot?",NULL};
Menu menu2 = {menu2t};
Point
	PtCurrent,	/* current position */
	pt(),		/* return character point */
	getpt();		/* return unpaced point from input */

Rectangle
	arect;		/* the aesthetic rectangle in a layer */

Texture t={
0177777, 0177777, 0177777, 0177777,
0177777, 0177777, 0177777, 0177777,
0177777, 0177777, 0177777, 0177777,
0177777, 0177777, 0177777, 0177777};
Texture cherries={
0, 037574, 077776, 017234,
000200, 000500, 003060, 004010,
016030, 037074, 077576, 077576,
077576, 077576, 037074, 016030};
Texture bye = {
0x8000, 0x8000, 0x8000, 0x8000,
0x884C, 0xE451, 0x9451, 0x8AA1,
0x8ADF, 0x8AA0, 0x8121, 0x711E,
0x0100, 0x0200, 0x0200, 0x0400};

int
	lineth = 1,
	xdelta,		/* distance along x axis */
	ydelta,		/* distance along y axis */
	delta,		/* min (xdelta, ydelta) */
	pushed = 0;	/* character stored away 0 = no, 1 = yes */
char
	pushc;		/* character stored away */
struct seg mLine[4];

char cursor = '\01';
main()
{

	request(SEND |KBD| RCV|MOUSE);

	init();
	PtCurrent = arect.origin;
	outc(cursor, &PtCurrent, 0);
	for(;;) {
		wait(KBD|RCV|MOUSE);
		if(ckreshape())reinit();
		if(own() & MOUSE){		/*mouse code goes here*/
			if(button2())
				switch(menuhit(&menu2, 2)){
				case 0:
					while(button123());
					cursswitch(&bye);
					while(!button123());
					if(button2()){
						sendchar('\n');
						exit(0);
					}
					else cursswitch((Texture *) 0);
					break;
				}
			if(button3()){
				request(KBD|RCV);
				wait(CPU);
				request(KBD|SEND|RCV|MOUSE);
			}
		}
		if(own() & KBD){
			while(own() & KBD)
				sendchar(kbdchar() & 0177);
		}
		if(own() & RCV){
			outc(cursor, &PtCurrent, 0);
			while(own() & RCV)
				outc(getchar(), &PtCurrent, 1);
			outc(cursor, &PtCurrent, 0);
		}
	}
}	
newline()
{
	cursinhibit();
	if(PtCurrent.y >= arect.corner.y - 2 * NS) {
		bitblt(&display, Rpt(Pt(arect.origin.x, arect.origin.y + NS), 
			arect.corner), &display, arect.origin, F_STORE);
		stipple(Rpt(Pt(arect.origin.x, arect.corner.y - NS),
			Drect.corner));
	} else
		PtCurrent.y += NS;
	cursallow();
}

getchar()
{
	register c;

	if((c = rcvchar()) == -1){
		wait(RCV);
		c = rcvchar();
	}
	return(c);
}

getint(){
	int d,r;
	r = getchar() & 0377;
	d = getchar();
	return( r | ((d & 0377 )<<8) );
}
Point
getpt()
{
	Point	p;
	char	c;

	p.x = getchar()&077;
	c = getchar();
	p.x |= (c&017) << 6;
	p.y = getchar()& 0177;
	p.y |= (c&0160) << 3;

	p.x = muldiv(p.x, delta, 800);
	p.x += arect.origin.x;
	p.y = muldiv(p.y, delta, 800);
	p.y += arect.origin.y;

	return (p);
}

stipple(r)
Rectangle r;
{
	rectf(&display, r, F_CLR);
}
#ifdef mc68000
ringbell(){
	*((char *)(384 * 1024L + 062)) = 2;
}
#endif
reinit(){
	register x, y;
	x = PtCurrent.x - arect.origin.x;
	y = PtCurrent.y - arect.origin.y;
	if(P->state & (MOVED|RESHAPED)){
		init();
	}
	PtCurrent.x = arect.origin.x + x;
	PtCurrent.y = arect.origin.y + y;
	if(!ptinrect(PtCurrent, arect))
		PtCurrent = arect.origin;	
	P->state &= ~(MOVED|RESHAPED);
}
init(){
	arect = Drect;
	arect.origin.x += XMARGIN;
	arect.corner.x -= XMARGIN;
	arect.origin.y += YMARGIN;
	arect.corner.y -= YMARGIN;

	xdelta = arect.corner.x - arect.origin.x;
	ydelta = arect.corner.y - arect.origin.y;
	delta = xdelta > ydelta ? ydelta : xdelta;
}
jcom.h          485456404   41    1     100664  527       `
#define void int

#define	OPEN	0360	/* host -> term */
#define	CLOSE	0361
#define	ON	0362
#define	OFF	0363
#define REQ	021
#define EXIT	0365
#define ACK	06

#define	ARC	0340
#define	MOVE	0341
#define	ERASE	0342
#define POINT	0343
#define PAUSE	0344
#define FILL	0345
#define TEXTURE	0346
#define CIRCLE	0347
#define SBOX	0350
#define DISC	0351
#define LINETH	0352
#define TEXT	0353
#define VEC	0354
#define HOME	0355
#define PAR	0356
#define PACKET	100
#define READY	017

#define TQUIT	0361	/* term -> host */
#define TOK	0360

jjplot.h        485456403   41    1     100664  294       `
#define void int
#define ckreshape()	(P->state&(RESHAPED|MOVED))
#define MORE 0
#define QUIT 1
struct seg {
	Point j1, j2;
	char stat;
};
extern struct seg mLine[];
extern Texture t, cherries;
extern int lineth, delta;
extern Point PtCurrent, getpt();
extern Menu menu;
extern Rectangle arect;
