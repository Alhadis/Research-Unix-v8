/*
 *	Bootstrap for 68ld
 */
#include	"proto.h"
static char	packet[MAXPKTSIZE];

main()
{
	register int count, size, c, state, tcrc;
	register char *cp;
	register char *dp;
	register int ack, error;

	error = 0;
nextpkt:
	state = 0;

	for(;;){
		c = getc();
		switch(state){
		case 0:				/* Sequence + PTYP */
			cp = packet;
			*cp++ = c;
			if((tcrc = c&PTYP) == ACKON){
				error = 0;
				ack = 1;
			}else if(tcrc != ACKOFF){
				if(tcrc != NOCRC)
					continue;
				ack = -1;
			}else
				ack = 0;
			tcrc = 0;
			state++;
			break;
		 case 1:			/* Address + data size */
			size = c - PKTASIZE;
			if(c>(MAXPKTDSIZE+PKTASIZE) || size<0)
				goto nextpkt;
			count = c;		/* Rest of packet to arrive - CRC */
			*cp++ = c;
			state++;
			break;
		 case 2:			/* Address + data */
			*cp++ = c;
			if(--count > 0)
				break;
			if(ack == -1)
				goto movepacket;
			state++;
			break;

		 case 3:
			if(c != (tcrc&0xFF))
				state++;	/* Bad CRC, skip next */
			state++;
			continue;

		 case 4:
			if(c != ((tcrc>>8)&0xFF))
				goto badcrc;			/* Bad CRC */
movepacket:
			dp = *(char **)(&packet[PKTHDRSIZE]);	/* Pick up address */
			if(size == 0){
				if(error)
					goto nextpkt;
				if(ack){
					putc(packet[0]);	/* ACK */
					putc(packet[0]);	/* Make sure last ACK gets out */
					putc(packet[0]);		/* Make sure last ACK gets out */
				}
				return dp;			/* 0 data part means start address */
			}else if(ack>0)
				putc(packet[0]);		/* ACK */
			cp = &packet[PKTHDRSIZE+PKTASIZE];
			do
				*dp++ = *cp++;			/* Move in data */
			while( --size );
			goto nextpkt;
		 case 5:
badcrc:
			error = 1;
		default:
			goto nextpkt;
		}

		tcrc = crc(tcrc, c);
	}
}
