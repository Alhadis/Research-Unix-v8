.TH MCC 1 Blit
.SH NAME
mcc \- MC68000 C compiler
.SH SYNOPSIS
.B mcc
[ option ] ... file ...
.SH DESCRIPTION
.I Mcc
is the C compiler for the Motorola 68000.
Its default action is to compile programs for running under the
.IR mpx (1)
environment on a Blit terminal.
.PP
.I Mcc
accepts several types of arguments:
.PP
Arguments whose names end with `.c' are taken to be
C source programs; they are compiled, and
each object program is left on the file
whose name is that of the source with `.o' substituted
for `.c'.
The `.o' file is normally deleted, however, if a single
C program is compiled and loaded all at one go.
.PP
In the same way,
arguments whose names end with `.s' are taken to be assembly source programs
and are assembled, producing a `.o' file.
.PP
Programs using floating-point must be compiled with the
.B \-lf
load-time option
to load the floating-point support package.
.PP
The following options are interpreted by
.IR mcc .
See
.IR mld (1)
for load-time options.
.TP 8
.B \-c
Suppress the loading phase of the compilation, and force
an object file to be produced even if only one program is compiled.
.TP
.B \-j
Compile the named programs, and load and link them for running stand-alone
on a Blit terminal.
.TP
.B \-m
Compile the named programs for ordinary (non-Blit) environments.
.TP
.B \-w
Suppress warning diagnostics.
.TP
.SM
.B \-O
Invoke an
object-code improver.
.TP
.SM
.B \-S
Compile the named C programs, and leave the
assembler-language output on corresponding files suffixed `.s'.
.TP
.SM
.B \-E
Run only the macro preprocessor
on the named C programs, and send the result to the
standard output.
.TP
.SM
.B \-C
prevent the macro preprocessor from eliding comments.
.TP
.BI \-o " output"
Name the final output file
.IR output .
If this option is used the file `a.out' will be left undisturbed.
.TP
.SM
.BI \-D name=def
.br
.ns
.TP
.SM
.BI \-D \*Sname
Define the
.I name
to the preprocessor,
as if by
`#define'.
If no definition is given, the name is defined as "1".
The symbol
.I mc68000
is predefined.
.TP
.SM
.BI \-U \*Sname
Remove any initial definition of
.IR name .
.TP
.SM
.BI \-I \*Sdir
`#include' files
whose names do not begin with `/' are always
sought first in the directory 
of the
.I file
argument,
then in directories named in 
.B \-I
options,
then in directories on a standard list.
.TP
.SM
.BI \-B \*Sstring
Find substitute compiler passes in the files named
.I string
with the suffixes cpp, ccom and c2.
If 
.I string 
is empty, use a standard backup version.
.TP
.BR \-t [ p012 ]
Find only the designated compiler passes in the
files whose names are constructed by a
.B \-B
option.
In the absence of a
.B \-B 
option, the
.I string
is taken to be `/usr/c/'.
.PP
Other arguments
are taken
to be either loader option arguments, or C-compatible
object programs, typically produced by an earlier
.I mcc
run,
or perhaps libraries of C-compatible routines.
These programs, together with the results of any
compilations specified, are loaded (in the order
given) to produce an executable program with name
.B a.out.
.SH FILES
.ta \w'/usr/jerq/lib/notsolow.o  'u
file.c	input file
.br
file.o	object file
.br
a.out	loaded output
.br
/tmp/ctm?	temporary
.br
/lib/cpp	preprocessor
.br
/usr/jerq/lib/ccom	compiler
.br
/usr/jerq/lib/occom	backup compiler
.br
/usr/jerq/lib/mc2	optimizer
.br
/usr/jerq/lib/l.o	runtime startoff for
.B \-j
.br
/usr/jerq/lib/notsolow.o	runtime startoff for
.B \-m
.br
/usr/jerq/lib/libc.a	standard library
.br
/usr/jerq/lib/libf.a	floating-point library
.br
/usr/jerq/lib/libj.a	graphics library (used in
.BR \-lj ).
.br
/usr/jerq/lib/libsys.a	system and I/O library (used in
.BR \-lj ).
.br
/usr/jerq/include	standard directory for `#include' files
.SH "OTHER PROGRAMS"
The usual array of associated object-code manipulating programs exists,
with specifications identical to the usual Unix programs, and with
names prefixed with an `m.'  These programs include:
.ta \w'mlorder      'u
.br
mas	assembler
.br
mlorder	order library (there is no mranlib)
.br
mnm	name list
.br
msize	object code size
.br
mstrip	strip symbol table
.fi
.SH "SEE ALSO"
B. W. Kernighan and D. M. Ritchie,
.I The C Programming Language,
Prentice-Hall,
1978
.br
B. W. Kernighan,
.I
Programming in C\(ema tutorial
.br
D. M. Ritchie,
.I
C Reference Manual
.br
mld(1)
.SH DIAGNOSTICS
The diagnostics produced by C itself are intended to be
self-explanatory.
Occasional messages may be produced by the assembler
or loader.
