























|attribute(page.offset; init;
[
.po\nOu
]
$ [
.po$
])

|attribute(line.length; init;
[
.ll\nWu
.lt\nWu
]
$ [
.ll$
.lt$
])

|attribute(page.length; init;
[
.pl\nLu
]
$ [
.pl$
])

|attribute(spacing; init off;
on [
.rs
]	off [
.ns
])

|attribute(new.page; nostack;
[
.bp
])

|attribute(line.spacing; stack, init;
$ [
.ls$
]	[
.ls1
])

|attribute(blank.lines; nostack;
$ [
.sp$
]	[
.sp1
])

|attribute(horizontal.motion; nostack;
$ [\h'$'])

|attribute(vertical.motion; nostack;
$ [\v'$'])

|attribute(concatenate; nostack;
[\c])

|attribute(new.line; nostack;
[
.br
])

|attribute(indent; stack, init;
$ [
.in$
]	[
'in0
])

|attribute(indent.line; nostack;
$ [
.ti$
]	[
'ti0
])

|attribute(fill; stack, init on;
on [
.fi
]	off [
.nf
])

|attribute(adjust; stack, init both;
right [
.adr
]	left [
.adl
]	both [
.adb
]	on [
.ad
]	off [
.na
])

|attribute(center; stack, default off;
on [
.ce9999
]	off [
.ce0
])

|attribute(center.block; stack, default off;
on [
.di:1
]	off [
.br
.di
.nr;q \n(.u
.nf
.nr;L \n(.L
.ls1
.nr;i \n(.i
.nr;y 1
.if\n(dl>\n(;y .nr ;y \n(dl
.if\n(;y<\n(.l .in (\n(.lu-\n(;yu)/2u
.:1
.if\n(;q .fi
.ls\n(;L
.in\n(;iu
.rr;y
.rm:1
])

|attribute(text; nostack;
$ [$])

|attribute(error; nostack;
$ [
.tm"__FILE__":__LINE__: $
])

|attribute(width; stack, default full;
narrow [
.if\n(:C \{\
.ll\nW
.lt\nW \}
]	full [
.if\n(:C \{\
.ll\n(:W
.lt\n(:W \}
])

|attribute(here; stack, default off;
on [
.if\n(:y .tm "__FILE__":__LINE__: Groups can not be nested
.nr:y 1
.br
.di:0
]	off [
.br
.di
.nr:d 1
.if(\n(dn>=\n(.t)&((\n(dn<(\n(.p-\n(:r-\n(:m)):\
(\n(nl>(\n(.p-\n(:r-\n(:o/2u+\n(:r)))\
.ne\n(.tu+1v
.nr;q \n(.u
.nf
.nr;L \n(.L
.ls1
.nr;i \n(.i
.in0
.rs
.:0
.nr:d 0
.if\n(;q .fi
.ls\n(;L
.in\n(;iu
.nr:y 0
.rr;L ;i ;q
.rm:0
])

|attribute(around; stack, default off;
on [
.if\n(:y .tm "__FILE__":__LINE__: Groups can not be nested
.nr:y 1
.nr;s \n(.s
.nr;f \n(.f
.nr;u \n(.u
.nr;j \n(.j
.nr;v \n(.v
.nr;L \n(.L
.nr;l \n(.l
.nr;i \n(.i
.ev1
.ps\n(;s
.vs\n(;sp+2p
.ft\n(;f
.nf
.if\n(;u .fi
.ad\n(;j
.vs\n(;vu
.ls\n(;L
.ll\n(;lu
.in\n(;iu
.ti\n(;iu
.hy14
.lt\n(;lu
.di:0
]	off [
.br
.di
.ev
.nr:z \n(:z%26+1
.if\n(:z-\n(:w=0 .tm "__FILE__":__LINE__: too many floating displays
.af;w a
.nr;w \n(:z
.rn:0 ?\n(;w
.nr!\n(;w 0
.if!\n(:C .nr !\n(;w 1
.nr|\n(;w \n(dn
.if((\n(:z-\n(:w=1)&((\n(!\n(;w=1)&(\n(:C<2))&\
((\n(dn<\n(.t):((\n(dn>(\n(.p-\n(:r-\n(:m))&\
(\n(nl<=(\n(.p-\n(:r-\n(:o/2u+\n(:r))))) .)z
.nr:y 0
.rr;L ;f ;i ;j ;l ;o ;s ;u ;v ;w
])

|attribute(around_placement; nostack;
[
.)w
])

|attribute(footnote; stack, default off;
on [
.if\n(:x .tm "__FILE__":__LINE__: Footnotes can not be nested
.nr:x 1
.nr;s \n(.s
.nr;f \n(.f
.nr;u \n(.u
.nr;j \n(.j
.nr;v \n(.v
.nr;L \n(.L
.nr;l \n(.l
.nr;i \n(.i
.ev1
.ps\n(;s
.vs\n(;sp+2p
.ft\n(;f
.nf
.if\n(;u .fi
.ad\n(;j
.vs\n(;vu
.ls\n(;L
.ll\n(;lu
.in\n(;iu
.ti\n(;iu
.hy14
.lt\n(;lu
|ifvalue wide on [
.if\n(:C \{\
.ll\n(:W
.lt\n(:W \}
]
'DUMMY
.da:F
.if!\n(:q \{\
.nr;o \n(.o
.po0
.ps10
.vs10p
.ft1
.ie\n(.A=0 \l'72p'
.el __________
.ft
.vs
.ps
.po\n(;ou\}
]	off [
.br
.di
|ifvalue wide on [
.if\n(:C \{\
.ll\nW
.lt\nW \}
.nr:v 1
]
'DUMMY
|ifnotvalue wide on [
.if!\n(:C .nr :v 1
]
'DUMMY
.ev
.nr:x 0
.nr:q +\n(dnu
.nr:o +\n(dnu
.if!\n(.pu-\n(nlu-.5p-\n(:ou .nr :o \n(.pu-\n(nlu-.5p
.if!\n(:ou-\n(:mu .nr :o \n(:mu
.ch)f -\n(:ou
.rr;L ;f ;i ;j ;l ;s ;u ;v
])

|attribute(size; stack, default;
$ [\&\s$]
[\&\s\nS])

|attribute(font.size; stack, init;
$ [
.ps$
.vs\n(.sp+2p
]	[
.ps\nSp
.vs\nSp+2p
])

|attribute(font; stack, init;
roman [
|ifvalue fill off [\&\f1]
|ifvalue fill on [
.ft1
]
]	italics [
|ifvalue fill off [\&\f2]
|ifvalue fill on [
.ft2
]
]	bold [
|ifvalue fill off [\&\f3]
|ifvalue fill on [
.ft3
]
]	special [
|ifvalue fill off [\&\f4]
|ifvalue fill on [
.ft4
]
]	cw [
|ifvalue fill off [\&\f(CW]
|ifvalue fill on [
.ftCW
]
]	[
|ifvalue fill off [\&\f\nF]
|ifvalue fill on [
.ft\nF
]
])

|attribute(temporary.font; nostack;
roman [\f1]
roman $ [\f1$\fP]
italics [\f2]
italics $ [\f2$\fP]
bold [\f3]
bold $ [\f3$\fP]
special [\f4]
special $ [\f4$\fP]
cw [\f(CW]
cw $ [\f(CW$\fP]
[\fP]
)

|attribute(font.family; stack, default times;
times [
.fp1 R
.fp2 I
.fp3 B
.fp4 BI
]	palatino [
.fp1 PA
.fp2 PI
.fp3 PB
.fp4 PX
]	bembo [
.fp1 B1
.fp2 B2
.fp3 B3
.fp4 B4
]	optima [
.fp1 O1
.fp2 O2
.fp3 O3
.fp4 O4
]	souvenir [
.fp1 SV
.fp2 SI
.fp3 SB
.fp4 SX
]	helvetica [
.fp1 H
.fp2 HI
.fp3 HB
.fp4 HX
]	cw [
.fp1 CW
.fp2 I
.fp3 B
.fp4 BI
])

|attribute(if; nostack;
$test [
.if$test \
]	begin $test [
.if$test \{\
]	end [\}\c
]	else $test [
.ie$test \
]	else begin $test [
.ie$test \{]
else [
.el\
]	else begin [
.el\{])

|attribute(tab; nostack;
[\&	])

|attribute(thick.line; nostack;
$ [
.ps24
\l'$'
.ps
]	[
.ps24
\l'\n(.lu'
.ps
])

|attribute(line; nostack;
$ [\l'$']
[\l'\n(.lu'])

|attribute(box; nostack;
x [\s12\o'\(mu\(sq'\s0]
empty [\s12\(sq\s0]
[\(sq])

|attribute(underline; stack, default off;
on [\kx]
off [\l'|\nxu\(ul'])

|attribute(hyphenate; stack, init on;
on [
.hy14
]	off [
.nh
])

|attribute(case; stack, init any;
upper [
]	lower [
]	capitalize [
]	any [
])

|attribute(tab.stops; nostack;
$* [
.ta$*
]	[
.ta.5i 1.0i 1.5i 2.0i 2.5i 3.0i 3.5i 4.0i 4.5i 5.0i 5.5i 6.0i 6.5i 7.0i 7.5i
])

|attribute(set; nostack;
$* $number [
|for i in $* {
.nr$i $number
}]	string $* $string [
|for i in $* {
.ds$i $string
}])

|attribute(store; nostack;
$* $$. [
|for i in $* {
.nr$i \n$$.
}]	$* $number.register [
|for i in $* {
.nr$i \n($number.register
}]	string $* $$. [
|for i in $* {
.ds$i \*$$.
}]	string $* $string.register [
|for i in $* {
.ds$i \*($string.register
}]	number.from.string $* $$. [
|for i in $* {
.nr$i \*$$.
}]	number.from.string $* $string.register [
|for i in $* {
.nr$i \*($string.register
}]	string.from.number $* $$. [
|for i in $* {
.ds$i \n$$.
}]	string.from.number $* $number.register [
|for i in $* {
.ds$i \n($number.register
}])

|attribute(clear; nostack;
$* [
|for i in $* {
.nr$i 0
}]	string $* [
.rm$*
])

|attribute(add; nostack;
$result $operand $* [
.nr$result \n($operand
|for i in $* {
.nr$result +\n($i
}]	$result $operand [
.nr$result \n($operand
]	string $string $text [
.as$string $text
]	string.from.number $string $number.register [
.as$string \n($number.register
]	string.from.string $string $string.register [
.as$string \*($string.register
])


|attribute(incr; nostack;
$* [
|for i in $* {
.nr$i +1
}])

|attribute(protect; nostack;
$ [
.ne$
]	[
.ne3
])

|attribute(warn.orphan; nostack;
$ [
]	[
])

|attribute(two.columns; nostack;
on [
.if\n(:C .tm "__FILE__":__LINE__: already in two column mode
.br
.nr:C 1
.nr:W \nW
.nrW \n(.lu*8u/17u
.nr:O \n(.lu*9u/17u+\nOu
.ll\nWu
.lt\nWu
.mk:u
]	off [
.if!\n(:C .tm "__FILE__":__LINE__: already in full page mode
.br
.if\n(:C>1 .ne \n(.tu+1v
.nrW \n(:Wu
.ll\nWu
.lt\nWu
.nr:C 0
])

|attribute(divert.string; nostack;
$string.name [
.ds$string.name ])

|attribute(divert.number; nostack;
$number.name [
.nr$number.name ])

|attribute(divert.output; stack, default off;
on $string.name [
.di$string.name
]	off [
.br
.di
])

|attribute(divert.input; stack, default off;
on $string.name [
.eo
.de$string.name
]	off [
..
.ec
])

|attribute(remember; nostack;
$ [
.mk$
])

|attribute(return; nostack;
$$. [
.sp|\n$$.u
]	$ [
.sp|\n($u
])

|attribute(goto; nostack;
$ [
.sp|$
])

|attribute(string; nostack;
$$. [\*$$.]
$string.register [\*($string.register])

|attribute(macro; nostack;
$ [
.$
])

|attribute(number; nostack;
$$. $format [
.af$$. $format
\n$$.]
$number.register $format [
.af$number.register $format
\n($number.register]
$$. [\n$$.]
$number.register [\n($number.register]
++ $$. [\n+$$.]
++ $number.register [\n+($number.register]
format $* $format [
|for i in $* {
.af$i $format
}])

|attribute(reference; stack, default off;
on {
.[
}	off {
.]
}	placement {
.[
$LIST$
})

|attribute(table; stack, default off;
on [
.TS
]	off [
.TE
])

|attribute(picture; stack, default off;
on [
.PS
]	off [
.PE
])

|attribute(equation; stack, default off;
on [
.EQ
]	off [
.EN
])

|attribute(graph; stack, default off;
on $$. [
.G1 \*$$.
]	on $string.register [
.G1 \*($string.register
]	off [
.G2
])

|attribute(bargraph; stack, default off;
on [
.B1
]	off [
.B0
])

|attribute(citation; nostack;
save [
.CD "]
save end $$. [" "\*$$."
]	save end $string.register [" "\*($string.register"
]	savepage end [" "\nP"
]	remember [
.CU "]
remember end ["])

|attribute(insert; nostack;
$file.name [
.so$file.name
])

|attribute(list.tags; stack, init none;
bullet [
.dsl0 bullet
]	dash [
.dsl0 dash
]	outline [
.dsl0 outline
]	number [
.dsl0 number
]	none [
.dsl0 none
])

|attribute(format.type; stack, init none;
model [
.dsf0 model
]	none [
.dsf0 none
])

|attribute(verbatim; stack, init off;
off []
on [])

|attribute(file.information; nostack;
[
.lf__LINE__ __FILE__
])

|attribute(white.text; nostack;
$text [|ifvalue verbatim off []|ifvalue verbatim on [$text]])

|attribute(nl.paragraph; nostack;
[|ifvalue verbatim on [
]|ifvalue verbatim off []])
