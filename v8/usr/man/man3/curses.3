.TH CURSES 3X
.SH NAME
curses \- screen functions with `optimal' cursor motion
.SH SYNOPSIS
.B cc
args
.B \-lcurses \-ltermcap
.SH DESCRIPTION
These routines give the user a method
of updating screens with reasonable optimization.
They keep an image of the current screen,
and the user sets up an image of a new one.
Then
.I refresh()
tells the routines to make the current screen look
like the new one.
The initialization routine
.I initscr()
must be called before any other routines
that deal with windows and screens.
The routine
.I endwin()
should be called before exiting.
.SH SEE ALSO
Ken Arnold,
`Screen Updating and Cursor Movement Optimization: A Library Package,
.I UNIX Programmer's Manual,
Berkeley 4.1BSD
.br
ioctl(2),
termcap(5)
.SH FUNCTIONS
.nf
.ds w \fIwin\fR
.ds s \fIstdscr\fR
.ta 3i
addch(ch)	add a character to \*s
addstr(str)	add a string to \*s
box(win,vert,hor)	draw a box around a window
crmode()	set cbreak mode
clear()	clear \*s
clearok(scr,boolf)	set clear flag for \fIscr\fR
clrtobot()	clear to bottom on \*s
clrtoeol()	clear to end of line on \*s
delwin(win)	delete \*w
echo()	set echo mode
endwin()	end window modes
erase()	erase \*s
getch()	get a char through \*s
getstr(str)	get a string through \*s
gettmode()	get tty modes
getyx(win,y,x)	get (y,x) co-ordinates
inch()	get char at current (y,x) co-ordinates
initscr()	initialize screens
leaveok(win,boolf)	set leave flag for \*w
longname(termbuf,name)	get long name from \fItermbuf\fR
move(y,x)	move to (y,x) on \*s
mvcur(lasty,lastx,newy,newx)	actually move cursor
newwin(lines,cols,begin_y,begin_x)\ 	create a new window
nl()	set newline mapping
nocrmode()	unset cbreak mode
noecho()	unset echo mode
nonl()	unset newline mapping
noraw()	unset raw mode
overlay(win1,win2)	overlay win1 on win2
overwrite(win1,win2)	overwrite win1 on top of win2
printw(fmt,arg1,arg2,...)	printf on \*s
raw()	set raw mode
refresh()	make current screen look like \*s
resetty()	reset tty flags to stored value
savetty()	stored current tty flags
scanw(fmt,arg1,arg2,...)	scanf through \*s
scroll(win)	scroll \*w one line
scrollok(win,boolf)	set scroll flag
setterm(name)	set term variables for name
standend()	end standout mode
standout()	start standout mode
subwin(win,lines,cols,begin_y,begin_x)\ 	create a subwindow
touchwin(win)	`change' all of \*w
unctrl(ch)	printable version of \fIch\fR
waddch(win,ch)	add char to \*w
waddstr(win,str)	add string to \*w
wclear(win)	clear \*w
wclrtobot(win)	clear to bottom of \*w
wclrtoeol(win)	clear to end of line on \*w
werase(win)	erase \*w
wgetch(win)	get a char through \*w
wgetstr(win,str)	get a string through \*w
winch(win)	get char at current (y,x) in \*w
wmove(win,y,x)	set current (y,x) co-ordinates on \*w
wprintw(win,fmt,arg1,arg2,...)\ 	printf on \*w
wrefresh(win)	make screen look like \*w
wscanw(win,fmt,arg1,arg2,...)\ 	scanf through \*w
wstandend(win)	end standout mode on \*w
wstandout(win)	start standout mode on \*w
