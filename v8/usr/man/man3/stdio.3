.TH STDIO 3S 
.SH NAME
stdio \- standard buffered input/output package
.SH SYNOPSIS
.B #include <stdio.h>
.PP
.SM
.B FILE
.B *stdin;
.br
.SM
.B FILE
.B *stdout;
.br
.SM
.B FILE
.B *stderr;
.SH DESCRIPTION
The functions described in Sections 3S constitute an efficient
user-level buffering scheme.
The in-line macros
.I getc
and
.IR  putc (3)
handle characters quickly.
The higher level routines
.I "gets, fgets, scanf, fscanf, fread,"
.I "puts, fputs, printf, fprintf, fwrite"
all use
.I getc
and
.I putc;
they can be freely intermixed.
.PP
A file with associated buffering is called a
.I stream,
and is declared to be a pointer to a defined type
.SM
FILE.
.IR  Fopen (3)
creates certain descriptive data for a stream
and returns a pointer to designate the stream in all
further transactions.
There are three normally open streams with constant
pointers declared in
the include file and associated with the standard open files:
.TP 10n
.BR stdin
standard input file
.br
.ns
.TP
.B stdout
standard output file
.br
.ns
.TP
.BR stderr
standard error file
.PP
A constant `pointer'
.SM
NULL
(0)
designates no stream at all.
.PP
An integer constant
.SM
EOF
(\-1) is returned
upon end of file or error by integer functions that
deal with streams.
.PP
Any routine that uses the standard input/output package
must include the header file <stdio.h> of pertinent
macro definitions.
The functions and constants mentioned in sections labeled 3S
are declared in the include file
and need no further declaration.
The constants, and the following `functions' are
implemented as macros; redeclaration of these names
is perilous:
.I getc,
.I getchar,
.I putc,
.I putchar,
.I feof,
.I ferror,
.IR fileno .
.SH "SEE ALSO"
open(2), close(2), read(2), write(2)
.SH DIAGNOSTICS
The value
.SM
EOF
is returned uniformly to indicate that a
.SM
FILE
pointer has not been initialized with
.I fopen,
input (output) has been attempted on an output (input) stream,
or a
.SM
FILE
pointer designates corrupt or otherwise unintelligible
.SM
FILE
data.
.SH BUGS
Buffering of output can prevent output data
from being seen until long after it is computed \- perhaps
never, as when an abort occurs between buffer filling and flushing.
.br
Buffering of input can cause a process to consume
more input than it actually uses.
This can cause trouble across 
.I exec (2)
or
.I system (3)
calls.

