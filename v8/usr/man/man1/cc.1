.TH CC 1
.SH NAME
cc, CC \- C compilers
.SH SYNOPSIS
.B cc
[ option ] ... file ...
.PP
.SM
.B CC
[ option ] ... file ...
.SH DESCRIPTION
.I Cc
compiles the language C; and
.I CC
compiles C++.
.I File
arguments ending with
.TP
\&.c
are taken to be
C source programs; they are compiled, and
each object program is left on the file
whose name is that of the source with `.o' substituted
for `.c'.
The `.o' file is normally deleted, however, if a single
C program is compiled and loaded all at one go.
.TP
\&.s
are taken to be assembly source programs
and are assembled, producing a `.o' file.
.PP
The following options are interpreted by
.I cc
and
.I CC.
See
.IR ld (1)
for load-time options.
.TP "w'\f3-tp[012]\f1 'u"
.B \-c
Suppress the loading phase of the compilation, and force
an object file to be produced even if only one program is compiled.
.TP
.B \-g
Have the compiler produce additional symbol table information
for 
.IR sdb (1)
or
.IR pi (9.1).
Also pass the
.B \-lg
flag to
.IR ld (1).
.TP
.B \-w
Suppress warning diagnostics.
.TP
.B \-p
Arrange for the compiler to produce code
which counts the number of times each routine is called;
also, if loading takes place, replace the standard startup
routine by one which arranges to gather profiling data
for later examination by
.IR  prof (1).
.TP
.SM
.B \-O
Invoke an
object-code improver.
.TP
.SM
.B \-R
Passed on to
.I as,
making initialized variables shared and read-only.
.TP
.SM
.B \-S
Compile the named C programs, and leave the
assembler-language output on corresponding files suffixed `.s'.
.TP
.SM
.B \-E
Run only the macro preprocessor
on the named C programs, and send the result to the
standard output.
.TP
.SM
.BR \-F\*S [ c ]
Run only the macro preprocessor and the C++ front end
.I cfront
on the named C programs, and send the result to the
standard ouput.
If
.B c
is present, produce output suitable for input to 
.I cc.
.TP
.SM
.B \-C
Prevent the macro preprocessor from eliding comments.
.TP
.BI \-o " output"
Name the final output file
.IR output .
If this option is used the file `a.out' will be left undisturbed.
.TP
.SM
.BI \-D\*S name=def
.br
.ns
.TP
.SM
.BI \-D \*Sname
Define the
.I name
to the preprocessor,
as if by
`#define'.
If no definition is given, the name is defined as "1".
.TP
.SM
.BI \-U \*Sname
Remove any initial definition of
.IR name .
.TP
.SM
.BI \-I \*Sdir
`#include' files
whose names do not begin with `/' are always
sought first in the directory 
of the
.I file
argument,
then in directories named in 
.B \-I
options,
then in directories on a standard list.
.PP
These options are peculiar to
.IR cc :
.TP
.SM
.BI \-B \*Sstring
Find substitute compiler passes in the files named
.I string
with the suffixes cpp, ccom and c2.
If 
.I string 
is empty, use a standard backup version.
.TP
.BR \-t [ p012 ]
Find only the designated compiler passes in the
files whose names are constructed by a
.B \-B
option.
In the absence of a
.B \-B 
option, the
.I string
is taken to be `/usr/c/'.
.PP
These options are peculiar to
.IR CC :
.TP
.BI \-. suffix
Instead of the standard output, place
.SM
.B \-E 
and
.SM
.B \-F
output in files whose name is that of the source with 
.BI . suffix
substituted for `.c'.
.TP
.SM
.B +E
Use C rules for scope of non-local names.
.TP
.SM
.B +S
Print debugging information from
.I cfront 
on the standard error file.
.TP
.B +d
Don't expand inline functions.
.TP
.BI +x name
Take size and alignment information from file
.I name
for cross compiling.
.TP
cppC=/lib/cpp
.PD0
.TP
cfrontC=/usr/bin/cfront
.TP
ccC=/bin/cc
environment parameters and their defaults; see 
.SM
FILES
below
.PD
.PP
Other arguments
are taken
to be either loader options or C-compatible
object programs, typically produced by an earlier
.I cc
run,
or perhaps libraries of C-compatible routines.
These programs, together with the results of any
compilations specified, are loaded (in the order
given) to produce an executable program with name
.B a.out.
.SH FILES
.ta \w'/usr/bin/cfront    'u
.nf
file.c	input file
file.i	cfront output
file.o	object file
a.out	loaded output
/tmp/ctm?	temporary
/lib/cpp	preprocessor
/lib/ccom	C compiler
/usr/bin/cfront	CC front end, filter from C++ to C
/lib/c2	optional optimizer
/lib/crt0.o	runtime startoff
/lib/mcrt0.o	startoff for profiling
/lib/libc.a	standard library, see (3)
/lib/libC.a	C++ library
/usr/include	standard directory for C `#include' files
/usr/include/CC	standard directory for C++ `#include files'
.SH "SEE ALSO"
B. W. Kernighan and D. M. Ritchie,
.I The C Programming Language,
Prentice-Hall,
1978
.br
D. M. Ritchie,
.I
C Reference Manual
.br
B. Stroustrup,
.I "A C++ Tutorial,"
AT&T Bell Labs CSTR-113, 1984
.br
B. Stroustrup,
.I "C++ Reference Manual,"
AT&T Bell Labs CSTR-108, 1984
.br
lint(1), cyntax(1),
ld(1), prof(1), adb(1), sdb(1), pi(9.1)
.SH DIAGNOSTICS
The diagnostics produced by the compilers are intended to be
self-explanatory.
Occasional messages may be produced by the assembler
.IR as (1)
or loader
.IR ld (1).
.SH BUGS
.I CC
can not yet handle certain constructs, for which it reports,
"sorry, not implemented."
.br
To permit the use of standard, untyped C libraries, 
.I CC
makes the loader name of the first function having a given name
agree with the loader name from 
.I cc.
Thus
.IP
overload read(int,char*,int), read(vector*);
.PP
arranges for 
.IR read (2)
to be called, as well as another `read' for a newly defined type.
Reversing the declarations would cause chaos, even in programs that 
do not directly call 
.IR read (2),
but do use
.IR stdio (3)
input.
